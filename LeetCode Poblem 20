class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for(char x : s.toCharArray()){
        if (x == '(' || x == '{' || x == '[') {
            stack.push(x);
        }
         else {
            if(stack.isEmpty()) return false;

        char top = stack.pop();
        if ((x == ')' && top != '(') || (x == '}' && top != '{') || (x == ']' && top != '[')){
            return false;
            }
        }
        }
        return stack.isEmpty();
    }
}

/*import java.util.*;

public class Solution {
    public static boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        
        for (char ch : s.toCharArray()) {
            if (ch == '(' || ch == '{' || ch == '[') {
                stack.push(ch); // Push opening brackets
            } else {
                if (stack.isEmpty()) return false; // No matching opening bracket
                
                char top = stack.pop();
                if ((ch == ')' && top != '(') || 
                    (ch == '}' && top != '{') || 
                    (ch == ']' && top != '[')) {
                    return false; // Mismatched bracket
                }
            }
        }
        
        return stack.isEmpty(); // If stack is empty, it's valid
    }
}*/
