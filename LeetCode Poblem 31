class Solution {
    public void nextPermutation(int[] a) {
        int n = a.length;
        int index = -1;

        // Step 1: Find the first index where a[i] < a[i + 1]
        for (int i = n - 2; i >= 0; i--) {
            if (a[i] < a[i + 1]) {
                index = i;
                break;
            }
        }

        // Step 2: If no such index exists, the array is in descending order
        if (index == -1) {
            reverse(a, 0, n - 1);
            return;
        }

        // Step 3: Find the next greater element to swap with
        for (int i = n - 1; i > index; i--) {
            if (a[i] > a[index]) {
                int temp = a[i];
                a[i] = a[index];
                a[index] = temp;
                break;
            }
        }

        // Step 4: Reverse the suffix starting at index + 1
        reverse(a, index + 1, n - 1);
    }

    // Helper method to reverse elements in the array
    public void reverse(int[] a, int start, int end) {
        while (start < end) {
            int temp = a[start];
            a[start] = a[end];
            a[end] = temp;
            start++;
            end--;
        }
    }
}
